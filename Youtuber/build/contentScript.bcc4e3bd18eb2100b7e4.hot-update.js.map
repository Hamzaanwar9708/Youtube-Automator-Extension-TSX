{"version":3,"file":"contentScript.bcc4e3bd18eb2100b7e4.hot-update.js","mappingslJA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Content/index.ts","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { injectIcon } from './Popup/icon';\r\ninjectIcon();\r\nfunction getCheckLink() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((res) => chrome.storage.local.get('check', (d) => res(d.check || null)));\r\n    });\r\n}\r\nfunction getVideoId(href) {\r\n    try {\r\n        const u = new URL(href, window.location.href);\r\n        const v = u.searchParams.get('v');\r\n        if (v && v.length === 11)\r\n            return v;\r\n        if (u.hostname === 'youtu.be' && u.pathname.length === 12)\r\n            return u.pathname.slice(1);\r\n        return null;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\nlet processedLinksMemory = [];\r\nchrome.storage.local.get('processedLinks', (d) => {\r\n    processedLinksMemory = d.processedLinks || [];\r\n});\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\nfunction showCompletedModal() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve) => {\r\n            const overlay = document.createElement('div');\r\n            overlay.classList.add('modal-overlay');\r\n            const container = document.createElement('div');\r\n            container.classList.add('modal-container');\r\n            const closeBtn = document.createElement('button');\r\n            closeBtn.innerText = 'Ã—';\r\n            closeBtn.classList.add('modal-close-btn');\r\n            const title = document.createElement('h2');\r\n            title.innerText = 'ðŸŽ‰ Task Completed!';\r\n            title.classList.add('modal-title');\r\n            const message = document.createElement('p');\r\n            message.innerText = 'Your task was successfully completed.';\r\n            message.classList.add('modal-message');\r\n            const ok = document.createElement('button');\r\n            ok.innerText = 'OK';\r\n            ok.classList.add('modal-ok-btn');\r\n            container.append(closeBtn, title, message, ok);\r\n            overlay.appendChild(container);\r\n            document.body.appendChild(overlay);\r\n            const cleanup = () => {\r\n                overlay.remove();\r\n                chrome.runtime.sendMessage({ action: 'completedModalClosed' });\r\n                resolve();\r\n            };\r\n            closeBtn.addEventListener('click', cleanup);\r\n            ok.addEventListener('click', cleanup);\r\n        });\r\n    });\r\n}\r\nfunction findProcessedLink(link, field) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const vid = getVideoId(link);\r\n        if (!vid)\r\n            return;\r\n        let obj = processedLinksMemory.find((i) => getVideoId(i.link) === vid);\r\n        const { channellinkLists = [] } = yield new Promise((resolve) => chrome.storage.local.get('channellinkLists', resolve));\r\n        const isFromChannel = channellinkLists.some((c) => c.link === link);\r\n        if (!obj) {\r\n            obj = {\r\n                link: `https://www.youtube.com/watch?v=${vid}`,\r\n                subscribed: isFromChannel,\r\n                liked: false,\r\n                commented: false,\r\n            };\r\n            processedLinksMemory.push(obj);\r\n        }\r\n        if (!obj[field]) {\r\n            obj[field] = true;\r\n            yield new Promise((res) => chrome.storage.local.set({ processedLinks: processedLinksMemory }, res));\r\n        }\r\n    });\r\n}\r\nchrome.runtime.onMessage.addListener((msg) => __awaiter(void 0, void 0, void 0, function* () {\r\n    switch (msg.action) {\r\n        case 'OpenFirstVideo&Subscribe':\r\n            openFirstVideoAndThen('Subscribe');\r\n            break;\r\n        case 'OpenFirstVideo&Like':\r\n            openFirstVideoAndThen('Like');\r\n            break;\r\n        case 'OpenFirstVideo&Comment':\r\n            openFirstVideoAndThen('Comment');\r\n            break;\r\n        case 'OpenFirstVideo&SLC':\r\n            openFirstVideoAndThen('SLC');\r\n            break;\r\n        case 'Subscribe':\r\n            yield sleep(2000);\r\n            yield sub();\r\n            yield sleep(8000);\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'sub' });\r\n            break;\r\n        case 'Like':\r\n            yield sleep(2000);\r\n            yield like();\r\n            yield sleep(8000);\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'like' });\r\n            break;\r\n        case 'Comment':\r\n            yield sleep(2000);\r\n            yield comments();\r\n            break;\r\n        case 'SLC':\r\n            yield sleep(2000);\r\n            yield sub();\r\n            yield sleep(3000);\r\n            yield like();\r\n            yield sleep(3000);\r\n            yield comments();\r\n            break;\r\n        case 'postGeneratedComment':\r\n            if (msg.comment) {\r\n                yield postComment(msg.comment);\r\n                yield sleep(8000);\r\n                chrome.runtime.sendMessage({ action: 'actionDone', type: 'comment' });\r\n            }\r\n            break;\r\n        case 'FindChannel':\r\n            yield sleep(2000);\r\n            yield findChannel();\r\n            break;\r\n        case 'showCompletedModal':\r\n            yield showCompletedModal();\r\n            break;\r\n        case 'Notify':\r\n            chrome.runtime.sendMessage({ action: 'actionDone' });\r\n            break;\r\n    }\r\n}));\r\n","__webpack_require__.h = () => (\"61326c72096769cb6532\")"],"names":[],"sourceRoot":""}