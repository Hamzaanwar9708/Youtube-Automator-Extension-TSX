{"version":3,"file":"contentScript.af74742355f71e88f890.hot-update.js","mappingssources":["webpack://chrome-extension-boilerplate-react/./src/pages/Content/index.ts","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { injectIcon } from './Popup/icon';\r\nimport { generateRandomId } from '../Content/Sections/Multiple/MultipleSection';\r\ninjectIcon();\r\nfunction getCheckLink() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((res) => chrome.storage.local.get('check', (d) => res(d.check || null)));\r\n    });\r\n}\r\nfunction getVideoId(href) {\r\n    try {\r\n        const u = new URL(href, window.location.href);\r\n        const v = u.searchParams.get('v');\r\n        if (v && v.length === 11)\r\n            return v;\r\n        if (u.hostname === 'youtu.be' && u.pathname.length === 12)\r\n            return u.pathname.slice(1);\r\n        return null;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\nlet processedLinksMemory = [];\r\nchrome.storage.local.get('processedLinks', (d) => {\r\n    processedLinksMemory = d.processedLinks || [];\r\n});\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\nfunction showCompletedModal() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve) => {\r\n            const overlay = document.createElement('div');\r\n            overlay.classList.add('modal-overlay');\r\n            const container = document.createElement('div');\r\n            container.classList.add('modal-container');\r\n            const closeBtn = document.createElement('button');\r\n            closeBtn.innerText = 'Ã—';\r\n            closeBtn.classList.add('modal-close-btn');\r\n            const title = document.createElement('h2');\r\n            title.innerText = 'ðŸŽ‰ Task Completed!';\r\n            title.classList.add('modal-title');\r\n            const message = document.createElement('p');\r\n            message.innerText = 'Your task was successfully completed.';\r\n            message.classList.add('modal-message');\r\n            const ok = document.createElement('button');\r\n            ok.innerText = 'OK';\r\n            ok.classList.add('modal-ok-btn');\r\n            container.append(closeBtn, title, message, ok);\r\n            overlay.appendChild(container);\r\n            document.body.appendChild(overlay);\r\n            const cleanup = () => {\r\n                overlay.remove();\r\n                chrome.runtime.sendMessage({ action: 'completedModalClosed' });\r\n                resolve();\r\n            };\r\n            closeBtn.addEventListener('click', cleanup);\r\n            ok.addEventListener('click', cleanup);\r\n        });\r\n    });\r\n}\r\nfunction findProcessedLink(link, field) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const vid = getVideoId(link);\r\n        if (!vid)\r\n            return;\r\n        let obj = processedLinksMemory.find((i) => getVideoId(i.link) === vid);\r\n        const { channellinkLists = [] } = yield new Promise((resolve) => chrome.storage.local.get('channellinkLists', resolve));\r\n        const isFromChannel = channellinkLists.some((c) => c.link === link);\r\n        if (!obj) {\r\n            obj = {\r\n                link: `https://www.youtube.com/watch?v=${vid}`,\r\n                subscribed: isFromChannel,\r\n                liked: false,\r\n                commented: false,\r\n            };\r\n            processedLinksMemory.push(obj);\r\n        }\r\n        if (!obj[field]) {\r\n            obj[field] = true;\r\n            yield new Promise((res) => chrome.storage.local.set({ processedLinks: processedLinksMemory }, res));\r\n        }\r\n    });\r\n}\r\nfunction openFirstVideoAndThen(action) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const el = document.querySelector('ytd-rich-grid-media a');\r\n        const h = el === null || el === void 0 ? void 0 : el.getAttribute('href');\r\n        if (h)\r\n            chrome.runtime.sendMessage({\r\n                action: 'openSingleVideoTab',\r\n                link: `https://www.youtube.com${h}`,\r\n                nextAction: action,\r\n            });\r\n    });\r\n}\r\nfunction getTabId() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((res) => chrome.storage.local.get('singleVideoTabId', (d) => res(d.singleVideoTabId || null)));\r\n    });\r\n}\r\nfunction waitForElement(selector, timeout = 10000) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((res, rej) => {\r\n            const found = document.querySelector(selector);\r\n            if (found)\r\n                return res(found);\r\n            const o = new MutationObserver(() => {\r\n                const f = document.querySelector(selector);\r\n                if (f) {\r\n                    o.disconnect();\r\n                    res(f);\r\n                }\r\n            });\r\n            o.observe(document.body, { childList: true, subtree: true });\r\n            setTimeout(() => {\r\n                o.disconnect();\r\n                rej();\r\n            }, timeout);\r\n        });\r\n    });\r\n}\r\nfunction sub() {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const link = yield getCheckLink();\r\n        if (!link)\r\n            return;\r\n        const vid = getVideoId(link);\r\n        const proc = processedLinksMemory.find((p) => getVideoId(p.link) === vid);\r\n        if (proc === null || proc === void 0 ? void 0 : proc.subscribed) {\r\n            return;\r\n        }\r\n        yield sleep(2000);\r\n        window.scrollTo({ top: 150, behavior: 'smooth' });\r\n        const btn = (yield waitForElement('ytd-subscribe-button-renderer button'));\r\n        if (((_a = btn.textContent) === null || _a === void 0 ? void 0 : _a.trim()) === 'Subscribe') {\r\n            btn.click();\r\n            yield findProcessedLink(link, 'subscribed');\r\n        }\r\n    });\r\n}\r\nfunction like() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const link = yield getCheckLink();\r\n        if (!link)\r\n            return;\r\n        const vid = getVideoId(link);\r\n        const proc = processedLinksMemory.find((p) => getVideoId(p.link) === vid);\r\n        if (proc === null || proc === void 0 ? void 0 : proc.liked) {\r\n            return;\r\n        }\r\n        yield sleep(2000);\r\n        window.scrollTo({ top: 200, behavior: 'smooth' });\r\n        const btn = (yield waitForElement('like-button-view-model button'));\r\n        if (btn.title === 'I like this') {\r\n            btn.click();\r\n            yield findProcessedLink(link, 'liked');\r\n        }\r\n    });\r\n}\r\nfunction comments() {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const link = yield getCheckLink();\r\n        if (!link)\r\n            return;\r\n        const vid = getVideoId(link);\r\n        const proc = processedLinksMemory.find((p) => getVideoId(p.link) === vid);\r\n        if (proc === null || proc === void 0 ? void 0 : proc.commented) {\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'comment' });\r\n            return;\r\n        }\r\n        yield sleep(2000);\r\n        window.scrollTo({ top: 500, behavior: 'smooth' });\r\n        const t = (_a = (yield waitForElement('ytd-watch-metadata yt-formatted-string')).textContent) === null || _a === void 0 ? void 0 : _a.trim();\r\n        if (t) {\r\n            chrome.runtime.sendMessage({ action: 'generatecomment', videoTitle: t });\r\n        }\r\n    });\r\n}\r\nfunction postComment(c) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        window.scrollTo({ top: 500, behavior: 'smooth' });\r\n        const box = yield waitForElement('ytd-comments div#simple-box yt-formatted-string');\r\n        if (!box) {\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'comment' });\r\n        }\r\n        else {\r\n            box.click();\r\n            document.execCommand('insertText', false, c);\r\n            yield sleep(2000);\r\n            (_a = document\r\n                .querySelector('div#footer #buttons #submit-button')) === null || _a === void 0 ? void 0 : _a.click();\r\n            yield findProcessedLink(window.location.href, 'commented');\r\n        }\r\n    });\r\n}\r\nfunction findChannel() {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const ytdInput = document.querySelector('#center yt-searchbox div form input');\r\n        if (!ytdInput) {\r\n            const msg = 'YouTube search input not found.';\r\n            throw new Error(msg);\r\n        }\r\n        ytdInput.click();\r\n        const stored = yield new Promise((res, rej) => chrome.storage.local.get('ytdChannel', (result) => {\r\n            if (chrome.runtime.lastError)\r\n                rej(chrome.runtime.lastError);\r\n            else\r\n                res(result.ytdChannel || '');\r\n        }));\r\n        ytdInput.focus();\r\n        ytdInput.value = stored;\r\n        ytdInput.dispatchEvent(new Event('input', { bubbles: true }));\r\n        yield sleep(3000);\r\n        const searchBtn = document.querySelector('ytd-masthead #center button.ytSearchboxComponentSearchButton');\r\n        if (!searchBtn)\r\n            throw new Error('YouTube search button not found.');\r\n        searchBtn.click();\r\n        yield sleep(5000);\r\n        const contentSection = document.getElementById('content-section');\r\n        if (!contentSection) {\r\n            const msg = 'YouTube channel not found.';\r\n            throw new Error(msg);\r\n        }\r\n        const channelAnchors = document.querySelector('#avatar-section a');\r\n        yield sleep(5000);\r\n        if (channelAnchors) {\r\n            channelAnchors.click();\r\n        }\r\n        else {\r\n            console.error('No channels found in the search results.');\r\n        }\r\n        yield sleep(5000);\r\n        const parent = document.querySelector('#tabsContent yt-tab-group-shape .yt-tab-group-shape-wiz__tabs');\r\n        const videoTab = parent === null || parent === void 0 ? void 0 : parent.querySelectorAll('.yt-tab-shape-wiz')[1];\r\n        if (videoTab) {\r\n            yield sleep(3000);\r\n            videoTab.click();\r\n            yield sleep(3000);\r\n            const btn = (yield waitForElement('ytd-subscribe-button-renderer button'));\r\n            if (((_a = btn.textContent) === null || _a === void 0 ? void 0 : _a.trim()) === 'Subscribe') {\r\n                yield sleep(3000);\r\n                btn.click();\r\n            }\r\n            yield sleep(3000);\r\n            const rootSelector = 'ytd-two-column-browse-results-renderer[page-subtype=\"channels\"] ytd-rich-grid-renderer #contents';\r\n            const firstVideo = Array.from(document.querySelectorAll(`${rootSelector} ytd-rich-item-renderer ytd-rich-grid-media a#thumbnail`));\r\n            if (firstVideo) {\r\n                const channellinkLists = [];\r\n                chrome.storage.local.get(['channelRangeObj'], (result) => {\r\n                    var _a, _b, _c, _d;\r\n                    const start = (_b = (_a = result === null || result === void 0 ? void 0 : result.channelRangeObj) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : 0;\r\n                    const end = (_d = (_c = result === null || result === void 0 ? void 0 : result.channelRangeObj) === null || _c === void 0 ? void 0 : _c.max) !== null && _d !== void 0 ? _d : 10;\r\n                    for (let i = start - 1; i < end && i < firstVideo.length; i++) {\r\n                        const el = firstVideo[i * 2];\r\n                        if (!el || !el.href) {\r\n                            console.warn(`Skipping undefined or invalid video at index ${i}`);\r\n                            continue;\r\n                        }\r\n                        const videoLink = el.href;\r\n                        channellinkLists.push({\r\n                            id: generateRandomId(),\r\n                            link: videoLink,\r\n                            subscribed: true,\r\n                            liked: false,\r\n                            commented: false,\r\n                        });\r\n                    }\r\n                    chrome.storage.local.set({ channellinkLists });\r\n                    console.log(channellinkLists);\r\n                    chrome.runtime.sendMessage({\r\n                        action: 'PlayChannelVideos',\r\n                        links: channellinkLists,\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                throw new Error('Video tab not found');\r\n            }\r\n        }\r\n    });\r\n}\r\nchrome.runtime.onMessage.addListener((msg) => __awaiter(void 0, void 0, void 0, function* () {\r\n    switch (msg.action) {\r\n        case 'OpenFirstVideo&Subscribe':\r\n            openFirstVideoAndThen('Subscribe');\r\n            break;\r\n        case 'OpenFirstVideo&Like':\r\n            openFirstVideoAndThen('Like');\r\n            break;\r\n        case 'OpenFirstVideo&Comment':\r\n            openFirstVideoAndThen('Comment');\r\n            break;\r\n        case 'OpenFirstVideo&SLC':\r\n            openFirstVideoAndThen('SLC');\r\n            break;\r\n        case 'Subscribe':\r\n            yield sleep(2000);\r\n            yield sub();\r\n            yield sleep(8000);\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'sub' });\r\n            break;\r\n        case 'Like':\r\n            yield sleep(2000);\r\n            yield like();\r\n            yield sleep(8000);\r\n            chrome.runtime.sendMessage({ action: 'actionDone', type: 'like' });\r\n            break;\r\n        case 'Comment':\r\n            yield sleep(2000);\r\n            yield comments();\r\n            break;\r\n        case 'SLC':\r\n            yield sleep(2000);\r\n            yield sub();\r\n            yield sleep(3000);\r\n            yield like();\r\n            yield sleep(3000);\r\n            yield comments();\r\n            break;\r\n        case 'postGeneratedComment':\r\n            if (msg.comment) {\r\n                yield postComment(msg.comment);\r\n                yield sleep(8000);\r\n                chrome.runtime.sendMessage({ action: 'actionDone', type: 'comment' });\r\n            }\r\n            break;\r\n        case 'FindChannel':\r\n            yield sleep(2000);\r\n            yield findChannel();\r\n            break;\r\n        case 'showCompletedModal':\r\n            yield showCompletedModal();\r\n            break;\r\n        case 'Notify':\r\n            chrome.runtime.sendMessage({ action: 'actionDone' });\r\n            break;\r\n    }\r\n}));\r\n","__webpack_require__.h = () => (\"1ec225e281ad7b48ac76\")"],"names":[],"sourceRoot":""}